@model Address
@{
    var contextID = Guid.NewGuid().ToString();
    //var defaultCountryCode = (Model.Country.IsNotNullOrEmpty()) ? Model.Country : GlobalSettings.Company.Address.Country;
    //var defaultRegionCode = (Model.State.IsNotNullOrEmpty()) ? Model.State : GlobalSettings.Company.Address.State;
    string defaultCountryCode;
    string defaultRegionCode;
    if (Model == null) //20170118 82825 DV. Potential null Model was encountered during testing with new addresses from Haitia, so added this check
    {
        defaultCountryCode = GlobalSettings.Company.Address.Country;
        defaultRegionCode = GlobalSettings.Company.Address.State;
    }
    else
    {
        defaultCountryCode = (Model.Country.IsNotNullOrEmpty()) ? Model.Country : GlobalSettings.Company.Address.Country;
        defaultRegionCode = (Model.State.IsNotNullOrEmpty()) ? Model.State : GlobalSettings.Company.Address.State;
    }
    
    
    var isVerifyable = ViewData["VerifyEnabled"] == null || Convert.ToBoolean(ViewData["VerifyEnabled"]) == true;
}

<div class="view-address" id="view-address-@contextID">

    @Html.HiddenFor(c => c.AddressType, new { data_role = "AddressType" })


    <div class="form-group">
        @Html.LabelFor(c => c.Country, new { @class = "control-label" })
        @Html.DropDownListFor(c => c.Country,
            selectList: Html.Countries(false, Identity.Current.CustomerID, defaultCountryCode), //20170118 82825 DV.
            htmlAttributes: new
            {
                @class = "form-control",
                data_region_bind = "#" + Html.IdFor(c => c.State) + "_" + contextID,
                data_address_bind = "#" + Html.IdFor(c => c.Address2) + "_" + contextID,
                data_role = "Country"
            })
        @Html.ValidationMessageFor(c => c.Country)
    </div>
    <div class="space-5"></div>

    <div class="form-group">
        @Html.LabelFor(c => c.Address1, new { @class = "control-label" })
        @Html.TextBoxFor(c => c.Address1, new
        {
            @class = "form-control",
            placeholder = "Street address",
            data_role = "Address1"
        })
        @Html.ValidationMessageFor(c => c.Address1)

        <div class="space-5"></div>
        <div class="form-group" @if (defaultCountryCode == "US") { <text> style="display: none;" </text>   }>
            @Html.TextBoxFor(c => c.Address2, new
            {
                @class = "form-control",
                placeholder = "Apartment, suite, unit, building, floor, etc.",
                id = Html.IdFor(c => c.Address2) + "_" + contextID,
                data_role = "Address2"
            })
            @Html.ValidationMessageFor(c => c.Address2)
        </div>
    </div>

    <label for="@Html.NameFor(c => c.City)" class="control-label hidden-xs" id="lblAddress1">City / State / Zip</label>
    <div class="row margin-5">
        <div class="col-xs-4">
            <div class="form-group">
                @Html.LabelFor(c => c.City, new { @class = "control-label visible-xs" })
                @Html.TextBoxFor(c => c.City, new
                {
                    @class = "form-control",
                    placeholder = "City",
                    data_role = "City"
                })
                @Html.ValidationMessageFor(c => c.City)
            </div>
        </div>
        <div class="col-xs-5">
            <div class="form-group">
                @Html.LabelFor(c => c.State, new { @class = "control-label visible-xs" })

                @if (Html.Countries(false, Identity.Current.CustomerID, defaultCountryCode).Count() > 1) //20170118 82825 DV.
                {
                    @Html.TextBoxFor(c => c.State,
                    htmlAttributes: new
                    {
                        @class = "form-control",
                        id = Html.IdFor(c => c.State) + "_" + contextID,
                        data_role = "State",
                        placeholder = "Example: TX or OU",
                        maxlength = "2"
                    })
                }
                else //20170122 82825 DV. Just stick with US. Also per client for now do not allow dropdown menu to dynamically repopulate based on country dropdown selection.
                {
                    @Html.DropDownListFor(c => c.State,
                    selectList: Html.Regions(defaultCountryCode, defaultRegionCode),
                    htmlAttributes: new
                    {
                        @class = "form-control",
                        id = Html.IdFor(c => c.State) + "_" + contextID,
                        data_role = "State"
                    })
                }

                @Html.ValidationMessageFor(c => c.State)
            </div>
        </div>

        <div class="col-xs-3">
            <div class="form-group">
                @Html.LabelFor(c => c.Zip, new { @class = "control-label visible-xs" })
                @Html.TextBoxFor(c => c.Zip, new
                {
                    @class = "form-control",
                    placeholder = "Zip code",
                    data_role = "Zip"
                })
                @*@Html.ValidationMessageFor(c => c.Zip) //20170118 82825 DV. See comments below in the script section *@
                <span data-valmsg-for="Zip"></span>
            </div>
        </div>
    </div>
    <div class="space-10"></div>
    @*@if (isVerifyable)
        {
            <div class="row margin-5">
                <div class="col-xs-12">
                    <button type="button" class="btn btn-info" data-role="verify">Verify Address</button>
                </div>
            </div>
        }*@
</div>



@using (Html.BeginPartialScript())
{
    <script>
        require(["jquery", "addresses"], function (address) {
            address.bind('#view-address-@contextID');

            //82825 20170118 DV. Dynamically change the City/State/ZipCode label to follow Haiti format
            $("[data-role='Country']").change(function () {
                if ($("[data-role='Country'] option:selected").val() == "HT") {
                    $("#lblAddress1").html("Commune / Department / Postal Code");
                }
                else {
                    $("#lblAddress1").html("City / State / Zip");
                }
            });

            @*82825 20170118 DV. Since MVC does not like to dynamically set the [RegularExpression] data annotation attribute, then for now we'll have to stick with JavaScript
              Also, client wants this behavior on NON Shipping Address pages only. Reminder to self:  Put all of this code in module pattern and move function to a utility file *@
            function validateUSZip()
            {
                if ($("[data-role='Country'] option:selected").val() == "US") {
                    if (!/^\d{5}(-\d{4})?$/.test($("[data-role='Zip'").val())) {
                        $("[data-valmsg-for='Zip'").css("color", "#FF0000");
                        $("[data-valmsg-for='Zip'").html("InvalidZipCode");
                        return false;
                    }
                    else {
                        $("[data-valmsg-for='Zip'").css("color", "");
                        $("[data-valmsg-for='Zip'").html("");
                        $(":submit").removeClass("disabled");
                        $(":submit").removeAttr("disabled", "");
                        $(":submit").text("Save Changes");
                        return true;
                    }
                }
                else//This portion only necessary for this page
                {
                    $("[data-valmsg-for='Zip'").css("color", "");
                    $("[data-valmsg-for='Zip'").html("");
                    $(":submit").removeClass("disabled");
                    $(":submit").removeAttr("disabled", "");
                    $(":submit").text("Save Changes");
                    return true;
                }

            }

            //$("[data-role='Zip'").focusout(function () {
            //    if (!validateUSZip())
            //    {
            //        return false;
            //    }
            //});

            //$(":submit").click(function () {
            //    if (!validateUSZip()) {
            //        return false;
            //    }
            //});
        });
    </script>
}